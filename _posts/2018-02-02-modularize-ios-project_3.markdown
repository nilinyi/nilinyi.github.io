---
    author: Linyi Ni
    comments: true
    date: 2018-02-06 17:42:32+00:00
    layout: post
    title: "Tools to Modularize iOS Project (3): Multi-projects"
    categories:
    - Work
    - iOS
    tags:
    - iOS
    - Architecture
---

## Build module via `Multi-projects`
The last article was talking about how to use `Target` to build modules. However, if you have multiple teams contributing to different apps/businesses/features, using `Target` to build module might not be suitable. The reason is that each `Target` is a folder so each team needs to work in a giant `xcodeproj` together because a folder cannot survive/compile without this giant project environment.

`Multi-projects` solves this problem, though **partially**. (It does not work well under CocoaPods environment. I will talk about it at the end of this article.). Each team could work individually on one single `project` without touching the central project/workspace.

**Note**: This is different from `subproject` which means a `xcodeproj` is under another `xcodeproj`. However, `multi-projects` means all `xcodeproj`'s are in the same level.

## Setup the environment
In this section, I will use a `workspace` which is generated by CocoaPods and add multiple `projects` into it. If you don't want to use CocoaPods, you can just create an empty `workspace` and then the rest of the procedure remains the same, except that you'll need a main project to literally run the app.

1. Create a new project from 'File->Project' and choose 'Cocoa Touch Framework'. This project will then work as a module to support your main project.

    ![12.jpg](/assets/modularize-ios-project/12.jpg)
    ![13.jpg](/assets/modularize-ios-project/13.jpg)

2. **Very important!** You should ensure that you are adding it to the correct `workspace` and `group`. Since we are NOT creating a `subproject`, we must put this new project at the same level where the main project lives, which means, **`Add to` and `Group`  should both point to `workspace`**.

    ![14.jpg](/assets/modularize-ios-project/14.jpg)
￼

3. As you could see, a new project is added in the same level where main project `TeamworkApp` lives. Now, you could start working on this single project even if you close the workspace and open the `TMALogin.xcodeproj` directly.

    ![15.jpg](/assets/modularize-ios-project/15.jpg)
￼
4. Since this project you build is actually a `framework`, you need to appoint which files to be exposed to the outside.
    - Move `TMALoginViewController.h` to `Public Headers` in `Build Phases`
    - Import `TMALoginViewController.h` in header `TMALogin.h`

    ![16.jpg](/assets/modularize-ios-project/16.jpg)
    ![17.jpg](/assets/modularize-ios-project/17.jpg)￼
￼

    As for what is `Public`, `Project` and `Private` level, I’ll just copy and paste from my the last article.
    - `Public` means that these interfaces are **exposed** for clients to use and will not be changed frequently.
    - `Private` **still means these interfaces are exposed**, however, it means for clients to JUST see them rather than use them because these interfaces might be under development that will be changed frequently or other whatever reasons.
    - `Project` means they will **not be exposed**. These interfaces could only be used inside this framework.

## Use this module in your main project
At this point, this newly added project will generate a module(framework) when it’s compiled. **However, your other projects will not linked with/depended on this framework automatically at this point**. An extra setup is necessary to let your main project compile successfully. Go to `Link Binary with Libraries` in `Build Phases` in the project that needs this framework, for instance, your main project, and add it.

![18.jpg](/assets/modularize-ios-project/18.jpg)￼

From now and then, the project that linked this framework could be able to see it. For example, I linked `TMALogin` framework in main project `TeamworkApp` and hence I could import it and use it like the picture below.
￼
![19.jpg](/assets/modularize-ios-project/19.jpg)￼

## Resources are not copied into main project
Any resources, for examples, pictures in `Assets`, are NOT copied to main project automatically. Well, you can archive all resources into a `Bundle` and then import it in main project, however, this is a really really way. Because by doing that you need to operate upon on `Bundle` every time you want to access a resource and you also need to archive again when new resources added to the bundle.

A better way is to use a shell script which could copy all these resources into main project automatically when they are compiled.

```sh
#!/bin/sh
# set -e
 
mkdir -p "${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}"
 
install_resource()
{
  if [[ "$1" = /* ]] ; then
    RESOURCE_PATH="$1"
  fi
  if [[ ! -e "$RESOURCE_PATH" ]] ; then
    cat << EOM
error: Resource "$RESOURCE_PATH" not found.
EOM
    exit 1
  fi
  case $RESOURCE_PATH in
    *.storyboard)
      echo "ibtool --reference-external-strings-file --errors --warnings --notices --minimum-deployment-target ${!DEPLOYMENT_TARGET_SETTING_NAME} --output-format human-readable-text --compile ${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/`basename \"$RESOURCE_PATH\" .storyboard`.storyboardc $RESOURCE_PATH --sdk ${SDKROOT} ${TARGET_DEVICE_ARGS}"
      ibtool --reference-external-strings-file --errors --warnings --notices --minimum-deployment-target ${!DEPLOYMENT_TARGET_SETTING_NAME} --output-format human-readable-text --compile "${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/`basename \"$RESOURCE_PATH\" .storyboard`.storyboardc" "$RESOURCE_PATH" --sdk "${SDKROOT}" ${TARGET_DEVICE_ARGS}
      ;;
    *.xib)
      echo "ibtool --reference-external-strings-file --errors --warnings --notices --minimum-deployment-target ${!DEPLOYMENT_TARGET_SETTING_NAME} --output-format human-readable-text --compile ${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/`basename \"$RESOURCE_PATH\" .xib`.nib $RESOURCE_PATH --sdk ${SDKROOT} ${TARGET_DEVICE_ARGS}"
      ibtool --reference-external-strings-file --errors --warnings --notices --minimum-deployment-target ${!DEPLOYMENT_TARGET_SETTING_NAME} --output-format human-readable-text --compile "${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/`basename \"$RESOURCE_PATH\" .xib`.nib" "$RESOURCE_PATH" --sdk "${SDKROOT}" ${TARGET_DEVICE_ARGS}
      ;;
    *.framework)
      echo "mkdir -p ${TARGET_BUILD_DIR}/${FRAMEWORKS_FOLDER_PATH}"
      mkdir -p "${TARGET_BUILD_DIR}/${FRAMEWORKS_FOLDER_PATH}"
      echo "rsync -av $RESOURCE_PATH ${TARGET_BUILD_DIR}/${FRAMEWORKS_FOLDER_PATH}"
      rsync -av "$RESOURCE_PATH" "${TARGET_BUILD_DIR}/${FRAMEWORKS_FOLDER_PATH}"
      ;;
    *.xcdatamodel)
      echo "xcrun momc \"$RESOURCE_PATH\" \"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/`basename "$RESOURCE_PATH"`.mom\""
      xcrun momc "$RESOURCE_PATH" "${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/`basename "$RESOURCE_PATH" .xcdatamodel`.mom"
      ;;
    *.xcdatamodeld)
      echo "xcrun momc \"$RESOURCE_PATH\" \"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/`basename "$RESOURCE_PATH" .xcdatamodeld`.momd\""
      xcrun momc "$RESOURCE_PATH" "${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/`basename "$RESOURCE_PATH" .xcdatamodeld`.momd"
      ;;
    *.xcmappingmodel)
      echo "xcrun mapc \"$RESOURCE_PATH\" \"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/`basename "$RESOURCE_PATH" .xcmappingmodel`.cdm\""
      xcrun mapc "$RESOURCE_PATH" "${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/`basename "$RESOURCE_PATH" .xcmappingmodel`.cdm"
      ;;
    *.xcassets)
 echo "all xcassets will compile later!"
      ;;
    *)
      echo "$RESOURCE_PATH"
      echo "$RESOURCE_PATH" >> "$RESOURCES_TO_COPY"
      ;;
  esac
}
 
install_project_resouces()
{
  PROJECT_RESOURCE_DIR="${PROJECT_DIR}/../$1"
   
  if [[ ! -e "${PROJECT_RESOURCE_DIR}" ]]; then
    cat << EOM
error: PROJECT_RESOURCE_DIR "${PROJECT_RESOURCE_DIR}" not found
EOM
    exit 1
  fi
 
  echo "copy resources in ${PROJECT_RESOURCE_DIR} to ${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}"
 
  ALL_RESOURCES=()
 
  FIND_ALL_RESOURCES=$(find "$PROJECT_RESOURCE_DIR" -iname "*.xcassets" -o -iname "*.xib" -o -iname "*.storyboard" -o -iname "*.plist" ! -iname "Info.plist")
  while read line; do
      ALL_RESOURCES+=("$line")
  done << "$RESOURCES_TO_COPY"
 
  case "${TARGETED_DEVICE_FAMILY}" in
    1,2)
      TARGET_DEVICE_ARGS="--target-device ipad --target-device iphone"
    ;;
    1)
      TARGET_DEVICE_ARGS="--target-device iphone"
    ;;
    2)
      TARGET_DEVICE_ARGS="--target-device ipad"
    ;;
    3)
      TARGET_DEVICE_ARGS="--target-device tv"
    ;;
    *)
      TARGET_DEVICE_ARGS="--target-device mac"
    ;;
  esac
 
  for i in ${ALL_RESOURCES[@]}; do
    install_resource "${i}"
  done
 
  mkdir -p "${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}"
  rsync -avr --copy-links --no-relative --exclude '*/.svn/*' --files-from="$RESOURCES_TO_COPY" / "${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}"
  if [[ "${ACTION}" == "install" ]] && [[ "${SKIP_INSTALL}" == "NO" ]]; then
    mkdir -p "${INSTALL_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}"
    rsync -avr --copy-links --no-relative --exclude '*/.svn/*' --files-from="$RESOURCES_TO_COPY" / "${INSTALL_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}"
  fi
 
  rm -f "$RESOURCES_TO_COPY"
}
 
for module in ${MODULES}; do
  install_project_resouces "${module}"
done
 
XCASSETS_SEARCH_DIR="${PROJECT_DIR}/.."
XCASSET_FILES=()
 
if [[ -n "${WRAPPER_EXTENSION}" ]] && [ "`xcrun --find actool`" ]
then
  # Find all other xcassets (this unfortunately includes those of path pods and other targets).
  ALL_XCASSETS=$(find "$XCASSETS_SEARCH_DIR" -iname "*.xcassets" -type d)
  while read line; do
    if [[ $line != "${PODS_ROOT}*" ]]; then
      XCASSET_FILES+=("$line")
    fi
  done <<<"$ALL_XCASSETS"
 
  echo "compile all xcassets: ${XCASSET_FILES[@]}"
  printf "%s\0" "${XCASSET_FILES[@]}" | xargs -0 xcrun actool --output-format human-readable-text --notices --warnings --platform "${PLATFORM_NAME}" --minimum-deployment-target "${!DEPLOYMENT_TARGET_SETTING_NAME}" ${TARGET_DEVICE_ARGS} --compress-pngs --compile "${BUILT_PRODUCTS_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}"
fi
 
echo "all done!"
```


## Working with CocoaPods
It'll be a little different compared to a normal `Podfile`. The picture below says everything. Be careful that you need to set the parameter `workspace` exactly as your main project's name, otherwise CocoaPods will generate a different workspace for you. [Plus, although it looks weird, **target parameter is outermost**](https://guides.cocoapods.org/syntax/podfile.html#project).

![20.jpg](/assets/modularize-ios-project/20.jpg)￼

## Unable to build individually under CocoaPods
This is what I mentioned at the beginning of this article. If you want an individual project to use CocoaPods, you MUST compile it under the `workspace` where your main project lives. Well, under this circumstance, your module still cannot be shipped out individually.
