<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linyi (Leo) Ni</title>
    <description>An adventurous iOS deveploer in Silicon Valley.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 07 Feb 2018 11:41:49 -0800</pubDate>
    <lastBuildDate>Wed, 07 Feb 2018 11:41:49 -0800</lastBuildDate>
    <generator>Jekyll v3.4.0</generator>
    
      <item>
        <title>Tools to Modularize iOS Project (3): Multi-projects</title>
        <description>&lt;h2 id=&quot;build-module-via-multi-projects&quot;&gt;Build module via &lt;code class=&quot;highlighter-rouge&quot;&gt;Multi-projects&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The last article was talking about how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;Target&lt;/code&gt; to build modules. However, if you have multiple teams contributing to different apps/businesses/features, using &lt;code class=&quot;highlighter-rouge&quot;&gt;Target&lt;/code&gt; to build module might not be suitable. The reason is that each &lt;code class=&quot;highlighter-rouge&quot;&gt;Target&lt;/code&gt; is a folder so each team needs to work in a giant &lt;code class=&quot;highlighter-rouge&quot;&gt;xcodeproj&lt;/code&gt; together because a folder cannot survive/compile without this giant project environment.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Multi-projects&lt;/code&gt; solves this problem, though &lt;strong&gt;partially&lt;/strong&gt;. (It does not work well under CocoaPods environment. I will talk about it at the end of this article.). Each team could work individually on one single &lt;code class=&quot;highlighter-rouge&quot;&gt;project&lt;/code&gt; without touching the central project/workspace.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This is different from &lt;code class=&quot;highlighter-rouge&quot;&gt;subproject&lt;/code&gt; which means a &lt;code class=&quot;highlighter-rouge&quot;&gt;xcodeproj&lt;/code&gt; is under another &lt;code class=&quot;highlighter-rouge&quot;&gt;xcodeproj&lt;/code&gt;. However, &lt;code class=&quot;highlighter-rouge&quot;&gt;multi-projects&lt;/code&gt; means all &lt;code class=&quot;highlighter-rouge&quot;&gt;xcodeproj&lt;/code&gt;’s are in the same level.&lt;/p&gt;

&lt;h2 id=&quot;setup-the-environment&quot;&gt;Setup the environment&lt;/h2&gt;
&lt;p&gt;In this section, I will use a &lt;code class=&quot;highlighter-rouge&quot;&gt;workspace&lt;/code&gt; which is generated by CocoaPods and add multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;projects&lt;/code&gt; into it. If you don’t want to use CocoaPods, you can just create an empty &lt;code class=&quot;highlighter-rouge&quot;&gt;workspace&lt;/code&gt; and then the rest of the procedure remains the same, except that you’ll need a main project to literally run the app.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create a new project from ‘File-&amp;gt;Project’ and choose ‘Cocoa Touch Framework’. This project will then work as a module to support your main project.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/12.jpg&quot; alt=&quot;12.jpg&quot; /&gt;
 &lt;img src=&quot;/assets/modularize-ios-project/13.jpg&quot; alt=&quot;13.jpg&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Very important!&lt;/strong&gt; You should ensure that you are adding it to the correct &lt;code class=&quot;highlighter-rouge&quot;&gt;workspace&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;group&lt;/code&gt;. Since we are NOT creating a &lt;code class=&quot;highlighter-rouge&quot;&gt;subproject&lt;/code&gt;, we must put this new project at the same level where the main project lives, which means, &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Add to&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Group&lt;/code&gt;  should both point to &lt;code class=&quot;highlighter-rouge&quot;&gt;workspace&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/14.jpg&quot; alt=&quot;14.jpg&quot; /&gt;
￼&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As you could see, a new project is added in the same level where main project &lt;code class=&quot;highlighter-rouge&quot;&gt;TeamworkApp&lt;/code&gt; lives. Now, you could start working on this single project even if you close the workspace and open the &lt;code class=&quot;highlighter-rouge&quot;&gt;TMALogin.xcodeproj&lt;/code&gt; directly.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/15.jpg&quot; alt=&quot;15.jpg&quot; /&gt;
￼&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Since this project you build is actually a &lt;code class=&quot;highlighter-rouge&quot;&gt;framework&lt;/code&gt;, you need to appoint which files to be exposed to the outside.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Move &lt;code class=&quot;highlighter-rouge&quot;&gt;TMALoginViewController.h&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Public Headers&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Phases&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Import &lt;code class=&quot;highlighter-rouge&quot;&gt;TMALoginViewController.h&lt;/code&gt; in header &lt;code class=&quot;highlighter-rouge&quot;&gt;TMALogin.h&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/16.jpg&quot; alt=&quot;16.jpg&quot; /&gt;
 &lt;img src=&quot;/assets/modularize-ios-project/17.jpg&quot; alt=&quot;17.jpg&quot; /&gt;￼
￼&lt;/p&gt;

    &lt;p&gt;As for what is &lt;code class=&quot;highlighter-rouge&quot;&gt;Public&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Project&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Private&lt;/code&gt; level, I’ll just copy and paste from my the last article.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Public&lt;/code&gt; means that these interfaces are &lt;strong&gt;exposed&lt;/strong&gt; for clients to use and will not be changed frequently.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Private&lt;/code&gt; &lt;strong&gt;still means these interfaces are exposed&lt;/strong&gt;, however, it means for clients to JUST see them rather than use them because these interfaces might be under development that will be changed frequently or other whatever reasons.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Project&lt;/code&gt; means they will &lt;strong&gt;not be exposed&lt;/strong&gt;. These interfaces could only be used inside this framework.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;use-this-module-in-your-main-project&quot;&gt;Use this module in your main project&lt;/h2&gt;
&lt;p&gt;At this point, this newly added project will generate a module(framework) when it’s compiled. &lt;strong&gt;However, your other projects will not linked with/depended on this framework automatically at this point&lt;/strong&gt;. An extra setup is necessary to let your main project compile successfully. Go to &lt;code class=&quot;highlighter-rouge&quot;&gt;Link Binary with Libraries&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Phases&lt;/code&gt; in the project that needs this framework, for instance, your main project, and add it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/18.jpg&quot; alt=&quot;18.jpg&quot; /&gt;￼&lt;/p&gt;

&lt;p&gt;From now and then, the project that linked this framework could be able to see it. For example, I linked &lt;code class=&quot;highlighter-rouge&quot;&gt;TMALogin&lt;/code&gt; framework in main project &lt;code class=&quot;highlighter-rouge&quot;&gt;TeamworkApp&lt;/code&gt; and hence I could import it and use it like the picture below.
￼
&lt;img src=&quot;/assets/modularize-ios-project/19.jpg&quot; alt=&quot;19.jpg&quot; /&gt;￼&lt;/p&gt;

&lt;h2 id=&quot;resources-are-not-copied-into-main-project&quot;&gt;Resources are not copied into main project&lt;/h2&gt;
&lt;p&gt;Any resources, for examples, pictures in &lt;code class=&quot;highlighter-rouge&quot;&gt;Assets&lt;/code&gt;, are NOT copied to main project automatically. Well, you can archive all resources into a &lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle&lt;/code&gt; and then import it in main project, however, this is a really really way. Because by doing that you need to operate upon on &lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle&lt;/code&gt; every time you want to access a resource and you also need to archive again when new resources added to the bundle.&lt;/p&gt;

&lt;p&gt;A better way is to use a shell script which could copy all these resources into main project automatically when they are compiled.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# set -e&lt;/span&gt;
 
mkdir -p &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TARGET_BUILD_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;UNLOCALIZED_RESOURCES_FOLDER_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
 
install_resource&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  if [[ &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; ]] ; then
    RESOURCE_PATH&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  fi
  if [[ ! -e &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCE_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; ]] ; then
    cat &amp;lt;&amp;lt; EOM
error: Resource &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCE_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; not found.
EOM
    exit 1
  fi
  case &lt;span class=&quot;nv&quot;&gt;$RESOURCE_PATH&lt;/span&gt; in
    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.storyboard&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      echo &lt;span class=&quot;s2&quot;&gt;&quot;ibtool --reference-external-strings-file --errors --warnings --notices --minimum-deployment-target &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!DEPLOYMENT_TARGET_SETTING_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; --output-format human-readable-text --compile &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TARGET_BUILD_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;UNLOCALIZED_RESOURCES_FOLDER_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;basename &lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCE_PATH&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt; .storyboard&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.storyboardc &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCE_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; --sdk &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SDKROOT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TARGET_DEVICE_ARGS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      ibtool --reference-external-strings-file --errors --warnings --notices --minimum-deployment-target &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!DEPLOYMENT_TARGET_SETTING_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; --output-format human-readable-text --compile &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TARGET_BUILD_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;UNLOCALIZED_RESOURCES_FOLDER_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;basename &lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCE_PATH&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt; .storyboard&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.storyboardc&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCE_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; --sdk &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SDKROOT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TARGET_DEVICE_ARGS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
      ;;
    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.xib&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      echo &lt;span class=&quot;s2&quot;&gt;&quot;ibtool --reference-external-strings-file --errors --warnings --notices --minimum-deployment-target &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!DEPLOYMENT_TARGET_SETTING_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; --output-format human-readable-text --compile &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TARGET_BUILD_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;UNLOCALIZED_RESOURCES_FOLDER_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;basename &lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCE_PATH&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt; .xib&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.nib &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCE_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; --sdk &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SDKROOT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TARGET_DEVICE_ARGS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      ibtool --reference-external-strings-file --errors --warnings --notices --minimum-deployment-target &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!DEPLOYMENT_TARGET_SETTING_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; --output-format human-readable-text --compile &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TARGET_BUILD_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;UNLOCALIZED_RESOURCES_FOLDER_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;basename &lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCE_PATH&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt; .xib&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.nib&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCE_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; --sdk &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SDKROOT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TARGET_DEVICE_ARGS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
      ;;
    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.framework&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      echo &lt;span class=&quot;s2&quot;&gt;&quot;mkdir -p &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TARGET_BUILD_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FRAMEWORKS_FOLDER_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      mkdir -p &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TARGET_BUILD_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FRAMEWORKS_FOLDER_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      echo &lt;span class=&quot;s2&quot;&gt;&quot;rsync -av &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCE_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TARGET_BUILD_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FRAMEWORKS_FOLDER_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      rsync -av &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCE_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TARGET_BUILD_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FRAMEWORKS_FOLDER_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      ;;
    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.xcdatamodel&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      echo &lt;span class=&quot;s2&quot;&gt;&quot;xcrun momc &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCE_PATH&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TARGET_BUILD_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;UNLOCALIZED_RESOURCES_FOLDER_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;basename &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCE_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.mom&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      xcrun momc &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCE_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TARGET_BUILD_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;UNLOCALIZED_RESOURCES_FOLDER_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;basename &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCE_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; .xcdatamodel&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.mom&quot;&lt;/span&gt;
      ;;
    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.xcdatamodeld&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      echo &lt;span class=&quot;s2&quot;&gt;&quot;xcrun momc &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCE_PATH&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TARGET_BUILD_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;UNLOCALIZED_RESOURCES_FOLDER_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;basename &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCE_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; .xcdatamodeld&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.momd&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      xcrun momc &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCE_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TARGET_BUILD_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;UNLOCALIZED_RESOURCES_FOLDER_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;basename &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCE_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; .xcdatamodeld&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.momd&quot;&lt;/span&gt;
      ;;
    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.xcmappingmodel&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      echo &lt;span class=&quot;s2&quot;&gt;&quot;xcrun mapc &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCE_PATH&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TARGET_BUILD_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;UNLOCALIZED_RESOURCES_FOLDER_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;basename &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCE_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; .xcmappingmodel&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.cdm&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      xcrun mapc &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCE_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TARGET_BUILD_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;UNLOCALIZED_RESOURCES_FOLDER_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;basename &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCE_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; .xcmappingmodel&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.cdm&quot;&lt;/span&gt;
      ;;
    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.xcassets&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 echo &lt;span class=&quot;s2&quot;&gt;&quot;all xcassets will compile later!&quot;&lt;/span&gt;
      ;;
    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      echo &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCE_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      echo &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCE_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCES_TO_COPY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      ;;
  esac
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
install_project_resouces&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  PROJECT_RESOURCE_DIR&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/../&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
   
  if [[ ! -e &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_RESOURCE_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; ]]; then
    cat &amp;lt;&amp;lt; EOM
error: PROJECT_RESOURCE_DIR &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_RESOURCE_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; not found
EOM
    exit 1
  fi
 
  echo &lt;span class=&quot;s2&quot;&gt;&quot;copy resources in &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_RESOURCE_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; to &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TARGET_BUILD_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;UNLOCALIZED_RESOURCES_FOLDER_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
 
  ALL_RESOURCES&lt;span class=&quot;o&quot;&gt;=()&lt;/span&gt;
 
  FIND_ALL_RESOURCES&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;find &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PROJECT_RESOURCE_DIR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; -iname &lt;span class=&quot;s2&quot;&gt;&quot;*.xcassets&quot;&lt;/span&gt; -o -iname &lt;span class=&quot;s2&quot;&gt;&quot;*.xib&quot;&lt;/span&gt; -o -iname &lt;span class=&quot;s2&quot;&gt;&quot;*.storyboard&quot;&lt;/span&gt; -o -iname &lt;span class=&quot;s2&quot;&gt;&quot;*.plist&quot;&lt;/span&gt; ! -iname &lt;span class=&quot;s2&quot;&gt;&quot;Info.plist&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
  while read line; do
      ALL_RESOURCES+&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  done &amp;lt;&amp;lt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCES_TO_COPY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
 
  case &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TARGETED_DEVICE_FAMILY&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; in
    1,2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      TARGET_DEVICE_ARGS&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--target-device ipad --target-device iphone&quot;&lt;/span&gt;
    ;;
    1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      TARGET_DEVICE_ARGS&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--target-device iphone&quot;&lt;/span&gt;
    ;;
    2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      TARGET_DEVICE_ARGS&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--target-device ipad&quot;&lt;/span&gt;
    ;;
    3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      TARGET_DEVICE_ARGS&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--target-device tv&quot;&lt;/span&gt;
    ;;
    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      TARGET_DEVICE_ARGS&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--target-device mac&quot;&lt;/span&gt;
    ;;
  esac
 
  for i in &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ALL_RESOURCES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;; do
    install_resource &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  done
 
  mkdir -p &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TARGET_BUILD_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;UNLOCALIZED_RESOURCES_FOLDER_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  rsync -avr --copy-links --no-relative --exclude &lt;span class=&quot;s1&quot;&gt;'*/.svn/*'&lt;/span&gt; --files-from&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCES_TO_COPY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; / &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TARGET_BUILD_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;UNLOCALIZED_RESOURCES_FOLDER_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  if [[ &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ACTION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;install&quot;&lt;/span&gt; ]] &amp;amp;&amp;amp; [[ &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SKIP_INSTALL&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;NO&quot;&lt;/span&gt; ]]; then
    mkdir -p &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INSTALL_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;UNLOCALIZED_RESOURCES_FOLDER_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    rsync -avr --copy-links --no-relative --exclude &lt;span class=&quot;s1&quot;&gt;'*/.svn/*'&lt;/span&gt; --files-from&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCES_TO_COPY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; / &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INSTALL_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;UNLOCALIZED_RESOURCES_FOLDER_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  fi
 
  rm -f &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESOURCES_TO_COPY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; module in &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MODULES&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;; do
  install_project_resouces &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
 
&lt;span class=&quot;nv&quot;&gt;XCASSETS_SEARCH_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/..&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;XCASSET_FILES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=()&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; [[ -n &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WRAPPER_EXTENSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; ]] &amp;amp;&amp;amp; [ &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;xcrun --find actool&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; ]
&lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  # Find all other xcassets &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;this unfortunately includes those of path pods and other targets&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.
  ALL_XCASSETS&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;find &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$XCASSETS_SEARCH_DIR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; -iname &lt;span class=&quot;s2&quot;&gt;&quot;*.xcassets&quot;&lt;/span&gt; -type d&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
  while read line; do
    if [[ &lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt; !&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PODS_ROOT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;*&quot;&lt;/span&gt; ]]; then
      XCASSET_FILES+&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    fi
  done &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ALL_XCASSETS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
 
  echo &lt;span class=&quot;s2&quot;&gt;&quot;compile all xcassets: &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;XCASSET_FILES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  printf &lt;span class=&quot;s2&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;XCASSET_FILES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | xargs -0 xcrun actool --output-format human-readable-text --notices --warnings --platform &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PLATFORM_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; --minimum-deployment-target &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!DEPLOYMENT_TARGET_SETTING_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TARGET_DEVICE_ARGS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; --compress-pngs --compile &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BUILT_PRODUCTS_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;UNLOCALIZED_RESOURCES_FOLDER_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
 
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;all done!&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;working-with-cocoapods&quot;&gt;Working with CocoaPods&lt;/h2&gt;
&lt;p&gt;It’ll be a little different compared to a normal &lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt;. The picture below says everything. Be careful that you need to set the parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;workspace&lt;/code&gt; exactly as your main project’s name, otherwise CocoaPods will generate a different workspace for you. &lt;a href=&quot;https://guides.cocoapods.org/syntax/podfile.html#project&quot;&gt;Plus, although it looks weird, &lt;strong&gt;target parameter is outermost&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/20.jpg&quot; alt=&quot;20.jpg&quot; /&gt;￼&lt;/p&gt;

&lt;h2 id=&quot;unable-to-build-individually-under-cocoapods&quot;&gt;Unable to build individually under CocoaPods&lt;/h2&gt;
&lt;p&gt;This is what I mentioned at the beginning of this article. If you want an individual project to use CocoaPods, you MUST compile it under the &lt;code class=&quot;highlighter-rouge&quot;&gt;workspace&lt;/code&gt; where your main project lives. Well, under this circumstance, your module still cannot be shipped out individually.&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Feb 2018 09:42:32 -0800</pubDate>
        <link>http://localhost:4000/2018/02/modularize-ios-project_3/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/modularize-ios-project_3/</guid>
        
        <category>iOS</category>
        
        <category>Architecture</category>
        
        
        <category>Work</category>
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Tools to Modularize iOS Project (1): Target</title>
        <description>&lt;h2 id=&quot;build-module-via-target&quot;&gt;Build module via Target&lt;/h2&gt;

&lt;p&gt;You might have known that &lt;code class=&quot;highlighter-rouge&quot;&gt;Targets&lt;/code&gt; are usually used for different distributions of the same project. One example is that using &lt;code class=&quot;highlighter-rouge&quot;&gt;Target&lt;/code&gt; to ship an iPad version out of your iOS project. Another example is the &lt;code class=&quot;highlighter-rouge&quot;&gt;Test Target&lt;/code&gt; in your project if you perform Unit Test or UI Test. In short, &lt;code class=&quot;highlighter-rouge&quot;&gt;Targets&lt;/code&gt; are the different managers of all the shared source code in that they determine which files to compile, how to compile and what things to ship out, etc.&lt;/p&gt;

&lt;p&gt;Therefore, one way to modularize an iOS project is to ship different modules via &lt;code class=&quot;highlighter-rouge&quot;&gt;Targets&lt;/code&gt; and let &lt;code class=&quot;highlighter-rouge&quot;&gt;Main Target&lt;/code&gt; depend on these targets to build the whole project. Technically, we are just using Target to build &lt;strong&gt;framework&lt;/strong&gt; that could be used as individual &lt;strong&gt;module&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;setup-the-environment&quot;&gt;Setup the environment&lt;/h2&gt;
&lt;p&gt;The following setup is under a &lt;code class=&quot;highlighter-rouge&quot;&gt;workspace&lt;/code&gt; built by CocoaPods, however, it really doesn’t matter whether you are in a CocoaPods environment or not. You can still follow the same procedure because all of the steps are under the &lt;code class=&quot;highlighter-rouge&quot;&gt;Main Project/Target&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Tap &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; button  in &lt;code class=&quot;highlighter-rouge&quot;&gt;TARGETS&lt;/code&gt; section.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/1.jpg&quot; alt=&quot;1.tiff&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Choose &lt;code class=&quot;highlighter-rouge&quot;&gt;Cocoa Touch Framework&lt;/code&gt; in the poped window.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/2.jpg&quot; alt=&quot;1.tiff&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure &lt;code class=&quot;highlighter-rouge&quot;&gt;Project&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Embed in Application&lt;/code&gt; both target at your &lt;code class=&quot;highlighter-rouge&quot;&gt;Main Project/Target&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/3.jpg&quot; alt=&quot;1.tiff&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You could see that a new folder is created and a new target is added in the &lt;code class=&quot;highlighter-rouge&quot;&gt;TARGETS&lt;/code&gt; section.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/4.jpg&quot; alt=&quot;1.tiff&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In your &lt;code class=&quot;highlighter-rouge&quot;&gt;Main Project/Target&lt;/code&gt;, check if the &lt;code class=&quot;highlighter-rouge&quot;&gt;Target Dependencies&lt;/code&gt; is set up correctly. If you created multiple targets and wanted to manage dependencies among them, here will be the right place for you. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Target Dependencies&lt;/code&gt; means that the targets listed here, a.k.a. child targets, will get compiled first until the parent target get compiled.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/5.jpg&quot; alt=&quot;1.tiff&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now you can start writing code inside this target. For example, I created a class named &lt;code class=&quot;highlighter-rouge&quot;&gt;TMADirDemoViewController&lt;/code&gt; and some private helper classes named &lt;code class=&quot;highlighter-rouge&quot;&gt;TMALittleSecret&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;TMAReallySecret&lt;/code&gt;. (These are very very bad name, though. Don’t use them in your project.)&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/6.jpg&quot; alt=&quot;1.tiff&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you want &lt;code class=&quot;highlighter-rouge&quot;&gt;TMADirDemoViewController&lt;/code&gt; in this target to be exposed to the outside, here are what you should do:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Move &lt;code class=&quot;highlighter-rouge&quot;&gt;TMADirViewController.h&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Public Headers&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Phases&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Import &lt;code class=&quot;highlighter-rouge&quot;&gt;TMADirViewController.h&lt;/code&gt; in header &lt;code class=&quot;highlighter-rouge&quot;&gt;TMADirTarget.h&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/7.jpg&quot; alt=&quot;1.tiff&quot; /&gt;
 &lt;img src=&quot;/assets/modularize-ios-project/8.jpg&quot; alt=&quot;1.tiff&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;You might have noticed that we could choose three levels of headers, &lt;code class=&quot;highlighter-rouge&quot;&gt;Public&lt;/code&gt;,  &lt;code class=&quot;highlighter-rouge&quot;&gt;Private&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Project&lt;/code&gt;. In fact, they could control what classes will be exposed outside the target.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Public&lt;/code&gt; means that these interfaces are &lt;strong&gt;exposed&lt;/strong&gt; for clients to use and will not be changed frequently.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Private&lt;/code&gt; &lt;strong&gt;still means these interfaces are exposed&lt;/strong&gt;, however, it means for clients to JUST see them rather than use them because these interfaces might be under development that will be changed frequently or for some other whatever reasons.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Project&lt;/code&gt; means they will &lt;strong&gt;not be exposed&lt;/strong&gt;. These interfaces could only be used inside this target.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-to-use-this-module-in-other-modules&quot;&gt;How to use this module in other modules?&lt;/h2&gt;
&lt;p&gt;Looks familiar, right?&lt;/p&gt;
&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;TMADirTarget/TMADirTarget.h&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/9.jpg&quot; alt=&quot;1.tiff&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-compile-and-test-it-separately&quot;&gt;How to compile and test it separately?&lt;/h2&gt;
&lt;p&gt;For compile, just change the &lt;code class=&quot;highlighter-rouge&quot;&gt;Scheme&lt;/code&gt; and then compile. Most of the time, you don’t need to do that because when you compile &lt;code class=&quot;highlighter-rouge&quot;&gt;Main Project/Target&lt;/code&gt;, all its depending targets will be compiled before it does.&lt;br /&gt;
For test, however, you will need another target to test this target. Just the way that you test your &lt;code class=&quot;highlighter-rouge&quot;&gt;Main Project/Target&lt;/code&gt;. But an easier way is that you could select &lt;code class=&quot;highlighter-rouge&quot;&gt;Unit Test&lt;/code&gt; when you created the target.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/10.jpg&quot; alt=&quot;1.tiff&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;working-with-cocoapods&quot;&gt;Working with CocoaPods&lt;/h2&gt;
&lt;p&gt;If you want this new target to use some Cocoapods libraries, you can just set it in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/11.jpg&quot; alt=&quot;1.tiff&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Feb 2018 09:42:32 -0800</pubDate>
        <link>http://localhost:4000/2018/02/modularize-ios-project_1/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/modularize-ios-project_1/</guid>
        
        <category>iOS</category>
        
        <category>Architecture</category>
        
        
        <category>Work</category>
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Understand Cocoapods</title>
        <description>&lt;!-- ---
    author: Linyi Ni
    comments: true
    date: 2017-12-25 10:12:26+00:00
    layout: post
    title: Understand CocoaPods
    categories:
    - Work
    - iOS
    tags:
    - iOS
    - CocoaPods
---

# Understand Cocoapods

When project becomes bigger, it’s inevitable for the team to build different modules so that code could be reused and engineers could work concurrently on different modules. In iOS particularly, we use static library, or framework(Cocoa Touch Library) to aggregate codes into a module. However, integration is always a headache. CocoaPods is born to fix this problem. This article is talking about what is CocoaPods, why we should use CocoaPods and how to create CocoaPods.

### What is CocoaPods?
I think introduction is somewhat redundant because nearly every iOS engineer knows and used this before. In short, CocoaPods is a dependency manager for Swift and Objective-C Cocoa projects. It can help you scale your projects elegantly.

### Why should we use CocoaPods?
Let’s take a step back.

##### Why people don’t like static library?
In short, it’s not user friendly. Let’s recap how to integrate a static library into your Xcode project.
1. Drag it into your project (Copied into Group if necessary)
2. Add headers of this static library (In the Target page of this static library)

  You think that’s the end? No!
  Almost every iOS engineer will come into this well-known `linker flag` bug. That’s, you will get crash like this
  ```objc
  - [SomeStaticLibrary foo]: unrecognized selector sent to instance xxx
  ```
  The reason for this bug is that Objective-C needs to know which object files (*.o) needed to be linked when it uses static library. By doing it, Objective-C checks `__.SYMDEF SORTED` (a.k.a. [standard archive header]), which is generated automatically, inside the .a file. However, this header does NOT contain all object files! It only contains the object files that define the class. If you have a category inside the static library, the object file of this category will not be linked. Therefore, to force it link category object file, you need to do this,

3. Add `-Objc` for `other linker flag` in `Build Settings`

  You thinks that’s the end? Still No! What if there aren't even class in the static library? Like only category files in the library?

4. Add `-force_load` for `other linker flag` in `Build Settings`

  It should be the end... However, if there any dynamic libraries referenced in the static library, you need to import them into Xcode too! Because static library does not support recursive reference!

5. Add any `dynamic libraries(.dylib or .framework)` that this static library referenced

So ugly, right? That's why Apple introduced `.framework(Cocoa Touch Framework)` to us. You could treat `.framework` as `.a + .h + some_dependency_settings`. One thing worth to know is that `.framework` could be either static or dynamic. However, only system framework is dynamic, the library we built are just static.

However, managing dependency is another headache.

##### Why should we use CocoaPods?
Simple.
For users, just specify what Pod(library) you want to use in `Podfile`. Forget about any dependency management.
For library developers, `podspec` is the only place you will need to manage. I will cover this in the next article.

### How CocoaPods works?
Todo

##### How to manage dependency?
It uses `Xcode Workspace` where `Pods.xcodeproj` is a subproject which includes all the libraries that each of them wrapped in a single `Target` and all the dependency settings leveraged by `Target`. (Thanks to Xcode, it's really easy to set dependency for each targets.) At the same time, in your project, `libPod.a` will be set as the linked static library, which is generated from `Pods.xcodeproj`. Therefore, every time you compile your code, it's also guaranteed that the compile is in the right order---`Pods.xcodeproj` will first get compiled based on the dependency order it sets inside and a static library `libPod.a` will be generated afterwards to participate your project's compile.

##### What if dependency conflict happens?
Todo

##### Where do these Pods(libraries) get fetched?
Todo



[standard archive header]: http://www.manpagez.com/man/5/ranlib/ --&gt;
</description>
        <pubDate>Mon, 25 Dec 2017 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/2017/12/understand-cocoapods/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/12/understand-cocoapods/</guid>
        
        
      </item>
    
  </channel>
</rss>
