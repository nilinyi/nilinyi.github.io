<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linyi (Leo) Ni</title>
    <description>An adventurous iOS deveploer in Silicon Valley.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 04 Feb 2018 13:53:03 -0800</pubDate>
    <lastBuildDate>Sun, 04 Feb 2018 13:53:03 -0800</lastBuildDate>
    <generator>Jekyll v3.4.0</generator>
    
      <item>
        <title>Tools to Modularize iOS Project (2): Multi-projects</title>
        <description>&lt;h2 id=&quot;build-module-via-multi-projects&quot;&gt;Build module via &lt;code class=&quot;highlighter-rouge&quot;&gt;Multi-projects&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The last article was talking about how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;Target&lt;/code&gt; to build modules. However, if you have multiple teams contributing to different businesses/features, using &lt;code class=&quot;highlighter-rouge&quot;&gt;Target&lt;/code&gt; to build module might not be suitable. The reason is obvious. Since each &lt;code class=&quot;highlighter-rouge&quot;&gt;Target&lt;/code&gt; is a folder, each team needs to work in a giant project together because a folder cannot survive/compile without this giant project environment.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Multi-projects&lt;/code&gt; solves this problem. Each team could work individually on each single &lt;code class=&quot;highlighter-rouge&quot;&gt;project&lt;/code&gt; without touching the central workspace.&lt;/p&gt;

&lt;h2 id=&quot;setup-the-environment&quot;&gt;Setup the environment&lt;/h2&gt;
&lt;p&gt;In this section, I will use a &lt;code class=&quot;highlighter-rouge&quot;&gt;workspace&lt;/code&gt; which is generated by CocoaPods and add multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;projects&lt;/code&gt; into it. If you don’t want to use CocoaPods, you can just create an empty &lt;code class=&quot;highlighter-rouge&quot;&gt;workspace&lt;/code&gt; and then the rest of the procedure remains the same, except that you’ll need a main project to literally run the app.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create a project from ‘File-&amp;gt;Project’ and choose ‘Cocoa Touch Framework’.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/12.jpg&quot; alt=&quot;12.jpg&quot; /&gt;
 &lt;img src=&quot;/assets/modularize-ios-project/13.jpg&quot; alt=&quot;13.jpg&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Very important! You should ensure that you are adding it to the correct &lt;code class=&quot;highlighter-rouge&quot;&gt;workspace&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;group&lt;/code&gt; at this stage. If you want to move &lt;code class=&quot;highlighter-rouge&quot;&gt;project&lt;/code&gt; into a different folder later, it would be kinda tricky because you need to fix the path (if you just drag a &lt;code class=&quot;highlighter-rouge&quot;&gt;project&lt;/code&gt; to a different folder). So it’s better to add it to the right place from the start. Normally, we’ll put all &lt;code class=&quot;highlighter-rouge&quot;&gt;projects&lt;/code&gt; to be in the same level, which means, &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Add to&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Group&lt;/code&gt;  should both point to &lt;code class=&quot;highlighter-rouge&quot;&gt;workspace&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/14.jpg&quot; alt=&quot;14.jpg&quot; /&gt;
￼&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As you could see, a new project is added in the same level as the main project &lt;code class=&quot;highlighter-rouge&quot;&gt;TeamworkApp&lt;/code&gt; is in. Now, you could start working on this single project without the &lt;code class=&quot;highlighter-rouge&quot;&gt;workspace&lt;/code&gt; environment! (Just open the &lt;code class=&quot;highlighter-rouge&quot;&gt;TMALogin.xcodeproj&lt;/code&gt; directly).&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/15.jpg&quot; alt=&quot;15.jpg&quot; /&gt;
￼&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Since this project you build is actually a framework, as I said in the first article, you need to appoint which files to be exposed to the client(other team). So, it still needs two steps.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Move &lt;code class=&quot;highlighter-rouge&quot;&gt;TMALoginViewController.h&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Public Headers&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Phases&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Import &lt;code class=&quot;highlighter-rouge&quot;&gt;TMALoginViewController.h&lt;/code&gt; in header &lt;code class=&quot;highlighter-rouge&quot;&gt;TMALogin.h&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/16.jpg&quot; alt=&quot;16.jpg&quot; /&gt;
 &lt;img src=&quot;/assets/modularize-ios-project/17.jpg&quot; alt=&quot;17.jpg&quot; /&gt;￼
￼&lt;/p&gt;

    &lt;p&gt;As for what is &lt;code class=&quot;highlighter-rouge&quot;&gt;Public&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Project&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Private&lt;/code&gt; level, I’ll just copy and paste from my the last article.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Public&lt;/code&gt; means that these interfaces are &lt;strong&gt;exposed&lt;/strong&gt; for clients to use and will not change frequently.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Private&lt;/code&gt; &lt;strong&gt;still means these interfaces are exposed&lt;/strong&gt;, however, it means for clients to JUST see them rather than use them because these interfaces might be under development that will be changed frequently or other whatever reasons.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Project&lt;/code&gt; means they will &lt;strong&gt;not be exposed&lt;/strong&gt;. These interfaces could only be used inside this library(target).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-to-use-this-module-in-other-modules&quot;&gt;How to use this module in other modules?&lt;/h2&gt;
&lt;p&gt;At this point, this newly added project will generate a framework when it’s compiled. &lt;strong&gt;However, your other projects have not linked with/depended on this framework automatically&lt;/strong&gt;. An extra setup is necessary to let your main project compile successfully. Go to &lt;code class=&quot;highlighter-rouge&quot;&gt;Link Binary with Libraries&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Phases&lt;/code&gt; in the project that needs this framework, for instance, your main project, and add it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/18.jpg&quot; alt=&quot;18.jpg&quot; /&gt;￼&lt;/p&gt;

&lt;p&gt;From now and then, the project that linked this framework could be able to see it. For example, I linked &lt;code class=&quot;highlighter-rouge&quot;&gt;TMALogin&lt;/code&gt; framework in main project &lt;code class=&quot;highlighter-rouge&quot;&gt;TeamworkApp&lt;/code&gt; and hence I could import it and use it like the picture below.
￼
&lt;img src=&quot;/assets/modularize-ios-project/19.jpg&quot; alt=&quot;19.jpg&quot; /&gt;￼&lt;/p&gt;

&lt;h2 id=&quot;how-to-compile-and-test-it-separately&quot;&gt;How to compile and test it separately?&lt;/h2&gt;
&lt;p&gt;You can compile/test it individually inside each project, or just&lt;/p&gt;

&lt;h2 id=&quot;working-with-cocoapods&quot;&gt;Working with CocoaPods&lt;/h2&gt;
&lt;p&gt;Just set up the &lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; and run &lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;. Be careful that you need to set the field workspace exactly as your main project’s name, otherwise CocoaPods will generate a different workspace for you. And yes, although it looks weird, target filed should be outermost. The picture below says everything.&lt;/p&gt;

&lt;p&gt;However, you might have noticed that, &lt;strong&gt;after installing a Pod in the subproject, you cannot compile it individually anymore!&lt;/strong&gt; Well, that’s the downside for&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/20.jpg&quot; alt=&quot;20.jpg&quot; /&gt;￼&lt;/p&gt;

&lt;h2 id=&quot;pros-and-cons&quot;&gt;Pros and Cons&lt;/h2&gt;
</description>
        <pubDate>Fri, 02 Feb 2018 09:42:32 -0800</pubDate>
        <link>http://localhost:4000/2018/02/modularize-ios-project_2/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/modularize-ios-project_2/</guid>
        
        <category>iOS</category>
        
        <category>Architecture</category>
        
        
        <category>Work</category>
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Tools to Modularize iOS Project (1): Target</title>
        <description>&lt;h2 id=&quot;build-module-via-target&quot;&gt;Build module via &lt;code class=&quot;highlighter-rouge&quot;&gt;Target&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Targets&lt;/code&gt; are usually used for different distributions of the same project. For example, if you want to ship an iPad version, using &lt;code class=&quot;highlighter-rouge&quot;&gt;Target&lt;/code&gt; could help you a lot. You might also see the &lt;code class=&quot;highlighter-rouge&quot;&gt;Test Target&lt;/code&gt; in your project if you do Unit Test or UI Test. Anyway, in my perspective, &lt;code class=&quot;highlighter-rouge&quot;&gt;Targets&lt;/code&gt; are the different managers of all the shared source code in that they determine which files to compile, how to compile and what thing to ship out, etc.&lt;/p&gt;

&lt;p&gt;Therefore, one way to modularize our project is that, we could ship different modules via &lt;code class=&quot;highlighter-rouge&quot;&gt;Targets&lt;/code&gt; and let &lt;code class=&quot;highlighter-rouge&quot;&gt;Main Target&lt;/code&gt; depend on those targets to build up the whole project.&lt;/p&gt;

&lt;h2 id=&quot;setup-the-environment&quot;&gt;Setup the environment&lt;/h2&gt;
&lt;p&gt;The following setup happens in a &lt;code class=&quot;highlighter-rouge&quot;&gt;workspace&lt;/code&gt; built by CocoaPods, however, it really doesn’t matter. You can still build your own target in a &lt;code class=&quot;highlighter-rouge&quot;&gt;project&lt;/code&gt; following the same procedure.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Tap &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; button  in &lt;code class=&quot;highlighter-rouge&quot;&gt;Targets&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/1.jpg&quot; alt=&quot;1.tiff&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Choose &lt;code class=&quot;highlighter-rouge&quot;&gt;Cocoa Touch Framework&lt;/code&gt; in the poped window.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/2.jpg&quot; alt=&quot;1.tiff&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure &lt;code class=&quot;highlighter-rouge&quot;&gt;Project&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Embed in Application&lt;/code&gt; both targeted at your main Target.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/3.jpg&quot; alt=&quot;1.tiff&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You could see that a new folder is created and a new target is added in the &lt;code class=&quot;highlighter-rouge&quot;&gt;TARGETS&lt;/code&gt; section.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/4.jpg&quot; alt=&quot;1.tiff&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In your main target, check if the &lt;code class=&quot;highlighter-rouge&quot;&gt;Target Dependencies&lt;/code&gt; is set up correctly. If you created multiple targets and wanted to manage dependencies among them, here will be the right place for you.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/5.jpg&quot; alt=&quot;1.tiff&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now you can start writing code inside this target. For example, I created a class named &lt;code class=&quot;highlighter-rouge&quot;&gt;TMADirDemoViewController&lt;/code&gt; and some private helper classes named &lt;code class=&quot;highlighter-rouge&quot;&gt;TMALittleSecret&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;TMAReallySecret&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/6.jpg&quot; alt=&quot;1.tiff&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the meantime, you only want &lt;code class=&quot;highlighter-rouge&quot;&gt;TMADirDemoViewController&lt;/code&gt; to be exposed to the clients (public). Here are what you should do:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Move &lt;code class=&quot;highlighter-rouge&quot;&gt;TMADirViewController.h&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Public Headers&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Phases&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Import &lt;code class=&quot;highlighter-rouge&quot;&gt;TMADirViewController.h&lt;/code&gt; in header &lt;code class=&quot;highlighter-rouge&quot;&gt;TMADirTarget.h&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/7.jpg&quot; alt=&quot;1.tiff&quot; /&gt;
 &lt;img src=&quot;/assets/modularize-ios-project/8.jpg&quot; alt=&quot;1.tiff&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;You might have noticed that we could choose three levels of headers, &lt;code class=&quot;highlighter-rouge&quot;&gt;Public&lt;/code&gt;,  &lt;code class=&quot;highlighter-rouge&quot;&gt;Private&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Project&lt;/code&gt;. And yes, they could control what will be exposed outside the library. (Remember what we build is a Cocoa Touch Library, right?)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Public&lt;/code&gt; means that these interfaces are &lt;strong&gt;exposed&lt;/strong&gt; for clients to use and will not change frequently&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Private&lt;/code&gt; &lt;strong&gt;still means these interfaces are exposed&lt;/strong&gt;, however, it means for clients to JUST see them rather than use them because these interfaces might be under development that will be changed frequently or other whatever reasons&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Project&lt;/code&gt; means they will &lt;strong&gt;not be exposed&lt;/strong&gt;. These interfaces could only be used inside this library(target).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-to-use-this-module-in-other-modules&quot;&gt;How to use this module in other modules?&lt;/h2&gt;
&lt;p&gt;Import this module the same as you did for other libraries&lt;/p&gt;
&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;TMADirTarget/TMADirTarget.h&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/9.jpg&quot; alt=&quot;1.tiff&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-compile-and-test-it-separately&quot;&gt;How to compile and test it separately?&lt;/h2&gt;
&lt;p&gt;For compile, just change the &lt;code class=&quot;highlighter-rouge&quot;&gt;Scheme&lt;/code&gt; and then compile.&lt;br /&gt;
For test, however, you will need another target to test this target. But an easier way is that you could select &lt;code class=&quot;highlighter-rouge&quot;&gt;Unit Test&lt;/code&gt; when you created the target.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/10.jpg&quot; alt=&quot;1.tiff&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;working-with-cocoapods&quot;&gt;Working with CocoaPods&lt;/h2&gt;
&lt;p&gt;If you want this new target to use some Cocoapods libraries, you can just set it in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/modularize-ios-project/11.jpg&quot; alt=&quot;1.tiff&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Feb 2018 09:42:32 -0800</pubDate>
        <link>http://localhost:4000/2018/02/modularize-ios-project_1/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/modularize-ios-project_1/</guid>
        
        <category>iOS</category>
        
        <category>Architecture</category>
        
        
        <category>Work</category>
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Understand Cocoapods</title>
        <description>&lt;!-- ---
    author: Linyi Ni
    comments: true
    date: 2017-12-25 10:12:26+00:00
    layout: post
    title: Understand CocoaPods
    categories:
    - Work
    - iOS
    tags:
    - iOS
    - CocoaPods
---

# Understand Cocoapods

When project becomes bigger, it’s inevitable for the team to build different modules so that code could be reused and engineers could work concurrently on different modules. In iOS particularly, we use static library, or framework(Cocoa Touch Library) to aggregate codes into a module. However, integration is always a headache. CocoaPods is born to fix this problem. This article is talking about what is CocoaPods, why we should use CocoaPods and how to create CocoaPods.

### What is CocoaPods?
I think introduction is somewhat redundant because nearly every iOS engineer knows and used this before. In short, CocoaPods is a dependency manager for Swift and Objective-C Cocoa projects. It can help you scale your projects elegantly.

### Why should we use CocoaPods?
Let’s take a step back.

##### Why people don’t like static library?
In short, it’s not user friendly. Let’s recap how to integrate a static library into your Xcode project.
1. Drag it into your project (Copied into Group if necessary)
2. Add headers of this static library (In the Target page of this static library)

  You think that’s the end? No!
  Almost every iOS engineer will come into this well-known `linker flag` bug. That’s, you will get crash like this
  ```objc
  - [SomeStaticLibrary foo]: unrecognized selector sent to instance xxx
  ```
  The reason for this bug is that Objective-C needs to know which object files (*.o) needed to be linked when it uses static library. By doing it, Objective-C checks `__.SYMDEF SORTED` (a.k.a. [standard archive header]), which is generated automatically, inside the .a file. However, this header does NOT contain all object files! It only contains the object files that define the class. If you have a category inside the static library, the object file of this category will not be linked. Therefore, to force it link category object file, you need to do this,

3. Add `-Objc` for `other linker flag` in `Build Settings`

  You thinks that’s the end? Still No! What if there aren't even class in the static library? Like only category files in the library?

4. Add `-force_load` for `other linker flag` in `Build Settings`

  It should be the end... However, if there any dynamic libraries referenced in the static library, you need to import them into Xcode too! Because static library does not support recursive reference!

5. Add any `dynamic libraries(.dylib or .framework)` that this static library referenced

So ugly, right? That's why Apple introduced `.framework(Cocoa Touch Framework)` to us. You could treat `.framework` as `.a + .h + some_dependency_settings`. One thing worth to know is that `.framework` could be either static or dynamic. However, only system framework is dynamic, the library we built are just static.

However, managing dependency is another headache.

##### Why should we use CocoaPods?
Simple.
For users, just specify what Pod(library) you want to use in `Podfile`. Forget about any dependency management.
For library developers, `podspec` is the only place you will need to manage. I will cover this in the next article.

### How CocoaPods works?
Todo

##### How to manage dependency?
It uses `Xcode Workspace` where `Pods.xcodeproj` is a subproject which includes all the libraries that each of them wrapped in a single `Target` and all the dependency settings leveraged by `Target`. (Thanks to Xcode, it's really easy to set dependency for each targets.) At the same time, in your project, `libPod.a` will be set as the linked static library, which is generated from `Pods.xcodeproj`. Therefore, every time you compile your code, it's also guaranteed that the compile is in the right order---`Pods.xcodeproj` will first get compiled based on the dependency order it sets inside and a static library `libPod.a` will be generated afterwards to participate your project's compile.

##### What if dependency conflict happens?
Todo

##### Where do these Pods(libraries) get fetched?
Todo



[standard archive header]: http://www.manpagez.com/man/5/ranlib/ --&gt;
</description>
        <pubDate>Mon, 25 Dec 2017 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/2017/12/understand-cocoapods/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/12/understand-cocoapods/</guid>
        
        
      </item>
    
  </channel>
</rss>
